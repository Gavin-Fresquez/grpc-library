#!/usr/bin/env python3
"""
Example usage of the MongoDB Patron system
"""

import sys
import os
from datetime import datetime, timedelta

# Add the parent directory to the path so we can import our modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models.patron import Patron
from repository.patron_repository import PatronRepository
from repository.mongodb_database import connect_mongodb, disconnect_mongodb


def main():
    """Demonstrate patron operations"""
    
    # Connect to MongoDB
    print("Connecting to MongoDB...")
    if not connect_mongodb():
        print("Failed to connect to MongoDB. Please ensure MongoDB is running.")
        return
    
    try:
        # Initialize repository
        patron_repo = PatronRepository()
        
        # Create sample patrons
        print("\n=== Creating Sample Patrons ===")
        
        # Student patron
        student_patron = Patron(
            id=None,  # Will be generated by MongoDB
            first_name="John",
            last_name="Doe",
            email="john.doe@university.edu",
            phone="555-0123",
            address="123 University Ave, Campus City, ST 12345",
            membership_type="student",
            membership_start_date=datetime.now(),
            membership_end_date=datetime.now() + timedelta(days=365),  # 1 year membership
            books_checked_out=[],
            total_books_borrowed=0,
            active=True,
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        student_id = patron_repo.create_patron(student_patron)
        print(f"Created student patron with ID: {student_id}")
        
        # Faculty patron
        faculty_patron = Patron(
            id=None,
            first_name="Dr. Jane",
            last_name="Smith",
            email="jane.smith@university.edu",
            phone="555-0456",
            address="456 Faculty Lane, Campus City, ST 12345",
            membership_type="faculty",
            membership_start_date=datetime.now(),
            membership_end_date=None,  # Faculty memberships don't expire
            books_checked_out=[],
            total_books_borrowed=0,
            active=True,
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        faculty_id = patron_repo.create_patron(faculty_patron)
        print(f"Created faculty patron with ID: {faculty_id}")
        
        # Community patron
        community_patron = Patron(
            id=None,
            first_name="Bob",
            last_name="Johnson",
            email="bob.johnson@email.com",
            phone="555-0789",
            address="789 Community St, City, ST 54321",
            membership_type="community",
            membership_start_date=datetime.now(),
            membership_end_date=datetime.now() + timedelta(days=180),  # 6 months
            books_checked_out=[],
            total_books_borrowed=0,
            active=True,
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        community_id = patron_repo.create_patron(community_patron)
        print(f"Created community patron with ID: {community_id}")
        
        # Demonstrate various operations
        print("\n=== Retrieving Patrons ===")
        
        # Get patron by ID
        retrieved_student = patron_repo.get_patron_by_id(student_id)
        if retrieved_student:
            print(f"Retrieved student: {retrieved_student.get_full_name()} ({retrieved_student.email})")
            print(f"Membership active: {retrieved_student.is_membership_active()}")
            print(f"Can checkout books: {retrieved_student.can_checkout_book()}")
        
        # Get patron by email
        retrieved_faculty = patron_repo.get_patron_by_email("jane.smith@university.edu")
        if retrieved_faculty:
            print(f"Retrieved faculty: {retrieved_faculty.get_full_name()} ({retrieved_faculty.membership_type})")
        
        print("\n=== Listing Patrons ===")
        
        # List all active patrons
        all_patrons = patron_repo.list_patrons(limit=10, active_only=True)
        print(f"Found {len(all_patrons)} active patrons:")
        for patron in all_patrons:
            print(f"  - {patron.get_full_name()} ({patron.membership_type})")
        
        print("\n=== Searching Patrons ===")
        
        # Search by name
        search_results = patron_repo.search_patrons_by_name("John")
        print(f"Search results for 'John': {len(search_results)} found")
        for patron in search_results:
            print(f"  - {patron.get_full_name()} ({patron.email})")
        
        # Get patrons by membership type
        faculty_patrons = patron_repo.get_patrons_by_membership_type("faculty")
        print(f"Faculty patrons: {len(faculty_patrons)} found")
        for patron in faculty_patrons:
            print(f"  - {patron.get_full_name()}")
        
        print("\n=== Simulating Book Checkout ===")
        
        # Simulate checking out books
        book_ids = ["book-001", "book-002", "book-003"]
        
        for book_id in book_ids:
            success = patron_repo.checkout_book(student_id, book_id)
            if success:
                print(f"Successfully checked out book {book_id} to student")
        
        # Retrieve updated patron info
        updated_student = patron_repo.get_patron_by_id(student_id)
        if updated_student:
            print(f"Student now has {len(updated_student.books_checked_out)} books checked out")
            print(f"Total books borrowed: {updated_student.total_books_borrowed}")
        
        # Simulate returning a book
        print("\n=== Simulating Book Return ===")
        return_success = patron_repo.return_book(student_id, "book-001")
        if return_success:
            print("Successfully returned book-001")
            
            # Check updated status
            final_student = patron_repo.get_patron_by_id(student_id)
            if final_student:
                print(f"Student now has {len(final_student.books_checked_out)} books checked out")
        
        print("\n=== Example completed successfully! ===")
        
    except Exception as e:
        print(f"Error during patron operations: {e}")
    
    finally:
        # Disconnect from MongoDB
        disconnect_mongodb()
        print("Disconnected from MongoDB")


if __name__ == "__main__":
    main()


